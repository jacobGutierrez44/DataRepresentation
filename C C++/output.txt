Test 1: div_convert(104, 5) -> Expected: 404, Got: 404 [PASS] 1/1
Test 2: div_convert(156, 8) -> Expected: 234, Got: 234 [PASS] 2/2
Test 3: div_convert(255, 16) -> Expected: FF, Got: FF [PASS] 3/3
Test 4: div_convert(255, 10) -> Expected: 255, Got: 255 [PASS] 4/4
Test 5: div_convert(255, 2) -> Expected: 11111111, Got: 11111111 [PASS] 5/5
Test 6: div_convert(42, 2) -> Expected: 101010, Got: 101010 [PASS] 6/6
Test 7: div_convert(0, 2) -> Expected: 0, Got: 0 [PASS]
Test 8: div_convert(0, 8) -> Expected: 0, Got: 0 [PASS]
Test 9: div_convert(0, 10) -> Expected: 0, Got: 0 [PASS]
Test 10: div_convert(0, 16) -> Expected: 0, Got: 0 [PASS]
Test 11: div_convert(1, 2) -> Expected: 1, Got: 1 [PASS] 11/11
Test 12: div_convert(1, 8) -> Expected: 1, Got: 1 [PASS] 12/12
Test 13: div_convert(1, 16) -> Expected: 1, Got: 1 [PASS] 13/13
Test 14: div_convert(8, 2) -> Expected: 1000, Got: 1000 [PASS] 14/14
Test 15: div_convert(16, 2) -> Expected: 10000, Got: 10000 [PASS] 15/15
Test 16: div_convert(64, 8) -> Expected: 100, Got: 100 [PASS] 16/16
Test 17: div_convert(256, 16) -> Expected: 100, Got: 100 [PASS] 17/17
Test 18: div_convert(-1, 2) -> Expected: 11111111111111111111111111111111, Got: 11111111111111111111111111111111 [PASS] 18/18
Test 19: div_convert(-1, 8) -> Expected: 37777777777, Got: 37777777777 [PASS] 19/19
Test 20: div_convert(-1, 10) -> Expected: 4294967295, Got: 4294967295 [PASS] 20/20
Test 21: div_convert(-1, 16) -> Expected: FFFFFFFF, Got: FFFFFFFF [PASS] 21/21
Test 22: div_convert(42, 5) -> Expected: 132, Got: 132 [PASS] 22/22
Test 23: div_convert(42, 8) -> Expected: 52, Got: 52 [PASS] 23/23
Test 24: div_convert(42, 10) -> Expected: 42, Got: 42 [PASS] 24/24
Test 25: div_convert(42, 16) -> Expected: 2A, Got: 2A [PASS] 25/25
Test 26: sub_convert(104, 5) -> Expected: 404, Got: 404 [PASS] 26/26
Test 27: sub_convert(156, 8) -> Expected: 234, Got: 234 [PASS] 27/27
Test 28: sub_convert(255, 16) -> Expected: FF, Got: FF [PASS] 28/28
Test 29: sub_convert(255, 10) -> Expected: 255, Got: 255 [PASS] 29/29
Test 30: sub_convert(255, 2) -> Expected: 11111111, Got: 11111111 [PASS] 30/30
Test 31: sub_convert(42, 2) -> Expected: 101010, Got: 101010 [PASS] 31/31
Test 32: sub_convert(0, 2) -> Expected: 0, Got: 0 [PASS]
Test 33: sub_convert(0, 8) -> Expected: 0, Got: 0 [PASS]
Test 34: sub_convert(0, 10) -> Expected: 0, Got: 0 [PASS]
Test 35: sub_convert(0, 16) -> Expected: 0, Got: 0 [PASS]
Test 36: sub_convert(1, 2) -> Expected: 1, Got: 1 [PASS] 36/36
Test 37: sub_convert(1, 8) -> Expected: 1, Got: 1 [PASS] 37/37
Test 38: sub_convert(1, 16) -> Expected: 1, Got: 1 [PASS] 38/38
Test 39: sub_convert(8, 2) -> Expected: 1000, Got: 1000 [PASS] 39/39
Test 40: sub_convert(16, 2) -> Expected: 10000, Got: 10000 [PASS] 40/40
Test 41: sub_convert(64, 8) -> Expected: 100, Got: 100 [PASS] 41/41
Test 42: sub_convert(256, 16) -> Expected: 100, Got: 100 [PASS] 42/42
Test 43: sub_convert(-1, 2) -> Expected: 11111111111111111111111111111111, Got: 11111111111111111111111111111111 [PASS] 43/43
Test 44: sub_convert(-1, 8) -> Expected: 37777777777, Got: 37777777777 [PASS] 44/44
Test 45: sub_convert(-1, 10) -> Expected: 4294967295, Got: 4294967295 [PASS] 45/45
Test 46: sub_convert(-1, 16) -> Expected: FFFFFFFF, Got: FFFFFFFF [PASS] 46/46
Test 47: sub_convert(42, 5) -> Expected: 132, Got: 132 [PASS] 47/47
Test 48: sub_convert(42, 8) -> Expected: 52, Got: 52 [PASS] 48/48
Test 49: sub_convert(42, 10) -> Expected: 42, Got: 42 [PASS] 49/49
Test 50: sub_convert(42, 16) -> Expected: 2A, Got: 2A [PASS] 50/50
Test 51: div_convert(7, 2) -> Expected: 111, Got: 111 [PASS] 51/51
Test 52: sub_convert(7, 2) -> Expected: 111, Got: 111 [PASS] 52/52
Test 53: div_convert(15, 8) -> Expected: 17, Got: 17 [PASS] 53/53
Test 54: sub_convert(15, 8) -> Expected: 17, Got: 17 [PASS] 54/54
Test 55: div_convert(31, 16) -> Expected: 1F, Got: 1F [PASS] 55/55
Test 56: sub_convert(31, 16) -> Expected: 1F, Got: 1F [PASS] 56/56
Test 57: div_convert(1000, 2) -> Expected: 1111101000, Got: 1111101000 [PASS] 57/57
Test 58: sub_convert(1000, 2) -> Expected: 1111101000, Got: 1111101000 [PASS] 58/58
Test 59: div_convert(1000, 8) -> Expected: 1750, Got: 1750 [PASS] 59/59
Test 60: sub_convert(1000, 8) -> Expected: 1750, Got: 1750 [PASS] 60/60
Test 61: div_convert(1000, 16) -> Expected: 3E8, Got: 3E8 [PASS] 61/61
Test 62: sub_convert(1000, 16) -> Expected: 3E8, Got: 3E8 [PASS] 62/62
Test: 63
Original: Binary=101 Octal=5 Decimal=5 Hex=5
Left Shift by 3: Binary=101000 Octal=50 Decimal=40 Hex=28
AND with 0xFF 3: Binary=101 Octal=5 Decimal=5 Hex=5
[PASS] 63/63
Test: 64
Original: Binary=0 Octal=0 Decimal=0 Hex=0 Left Shift by 3: Binary=0 Octal=0 Decimal=0 Hex=0 AND with 0xFF 3: Binary=0 Octal=0 Decimal=0 Hex=0 [PASS] 64/64
Test: 65
Original: Binary=1 Octal=1 Decimal=1 Hex=1
Left Shift by 3: Binary=1000 Octal=10 Decimal=8 Hex=8
AND with 0xFF 3: Binary=1 Octal=1 Decimal=1 Hex=1
[PASS] 65/65
Test: 66
Original: Binary=111 Octal=7 Decimal=7 Hex=7
Left Shift by 3: Binary=111000 Octal=70 Decimal=56 Hex=38
AND with 0xFF 3: Binary=111 Octal=7 Decimal=7 Hex=7
[PASS] 66/66
Test: 67
Original: Binary=1111 Octal=17 Decimal=15 Hex=F
Left Shift by 3: Binary=1111000 Octal=170 Decimal=120 Hex=78
AND with 0xFF 3: Binary=1111 Octal=17 Decimal=15 Hex=F
[PASS] 67/67
Test: 68
Original: Binary=1000 Octal=10 Decimal=8 Hex=8
Left Shift by 3: Binary=1000000 Octal=100 Decimal=64 Hex=40
AND with 0xFF 3: Binary=1000 Octal=10 Decimal=8 Hex=8
[PASS] 68/68
Test: 69
Original: Binary=10000 Octal=20 Decimal=16 Hex=10
Left Shift by 3: Binary=10000000 Octal=200 Decimal=128 Hex=80
AND with 0xFF 3: Binary=10000 Octal=20 Decimal=16 Hex=10
[PASS] 69/69
Test: 70
Original: Binary=100000 Octal=40 Decimal=32 Hex=20
Left Shift by 3: Binary=100000000 Octal=400 Decimal=256 Hex=100
AND with 0xFF 3: Binary=100000 Octal=40 Decimal=32 Hex=20
[PASS] 70/70
Test: 71
Original: Binary=11111111 Octal=377 Decimal=255 Hex=FF
Left Shift by 3: Binary=11111111000 Octal=3770 Decimal=2040 Hex=7F8
AND with 0xFF 3: Binary=11111111 Octal=377 Decimal=255 Hex=FF
[PASS] 71/71
Test: 72
Original: Binary=100000000 Octal=400 Decimal=256 Hex=100
Left Shift by 3: Binary=100000000000 Octal=4000 Decimal=2048 Hex=800
AND with 0xFF 3: Binary=0 Octal=0 Decimal=0 Hex=0 [PASS] 72/72
Test: 73
Original: Binary=111111111 Octal=777 Decimal=511 Hex=1FF
Left Shift by 3: Binary=111111111000 Octal=7770 Decimal=4088 Hex=FF8
AND with 0xFF 3: Binary=11111111 Octal=377 Decimal=255 Hex=FF
[PASS] 73/73
Test: 74
Original: Binary=1111101000 Octal=1750 Decimal=1000 Hex=3E8
Left Shift by 3: Binary=1111101000000 Octal=17500 Decimal=8000 Hex=1F40
AND with 0xFF 3: Binary=11101000 Octal=350 Decimal=232 Hex=E8
[PASS] 74/74
Test: 75
Original: Binary=1111111111111111 Octal=177777 Decimal=65535 Hex=FFFF
Left Shift by 3: Binary=1111111111111111000 Octal=1777770 Decimal=524280 Hex=7FFF8
AND with 0xFF 3: Binary=11111111 Octal=377 Decimal=255 Hex=FF
[PASS] 75/75
Test: 76
Original: Binary=11111111111111111111111111111111 Octal=37777777777 Decimal=4294967295 Hex=FFFFFFFF
Left Shift by 3: Binary=11111111111111111111111111111000 Octal=37777777770 Decimal=4294967288 Hex=FFFFFFF8
AND with 0xFF 3: Binary=11111111 Octal=377 Decimal=255 Hex=FF
[PASS] 76/76
Test 77: div_convert(2147483647, 2) -> Expected: 1111111111111111111111111111111, Got: 1111111111111111111111111111111 [PASS] 77/77
Test 78: sub_convert(2147483647, 2) -> Expected: 1111111111111111111111111111111, Got: 1111111111111111111111111111111 [PASS] 78/78
Test 79: div_convert(1073741824, 8) -> Expected: 10000000000, Got: 10000000000 [PASS] 79/79
Test 80: sub_convert(1073741824, 8) -> Expected: 10000000000, Got: 10000000000 [PASS] 80/80
Test 81: div_convert(268435456, 16) -> Expected: 10000000, Got: 10000000 [PASS] 81/81
Test 82: sub_convert(268435456, 16) -> Expected: 10000000, Got: 10000000 [PASS] 82/82
Test 83: div_convert(-2, 10) -> Expected: 4294967294, Got: 4294967294 [PASS] 83/83
Test 84: sub_convert(-2, 10) -> Expected: 4294967294, Got: 4294967294 [PASS] 84/84
Test 85: div_convert(-2, 16) -> Expected: FFFFFFFE, Got: FFFFFFFE [PASS] 85/85
Test 86: sub_convert(-2, 16) -> Expected: FFFFFFFE, Got: FFFFFFFE [PASS] 86/86
Test 87: div_convert(4, 5) -> Expected: 4, Got: 4 [PASS] 87/87
Test 88: sub_convert(4, 5) -> Expected: 4, Got: 4 [PASS] 88/88
Test 89: div_convert(7, 8) -> Expected: 7, Got: 7 [PASS] 89/89
Test 90: sub_convert(7, 8) -> Expected: 7, Got: 7 [PASS] 90/90
Test 91: div_convert(15, 16) -> Expected: F, Got: F [PASS] 91/91
Test 92: sub_convert(15, 16) -> Expected: F, Got: F [PASS] 92/92
Test 93: div_convert(25, 5) -> Expected: 100, Got: 100 [PASS] 93/93
Test 94: sub_convert(25, 5) -> Expected: 100, Got: 100 [PASS] 94/94
Test 95: div_convert(124, 5) -> Expected: 444, Got: 444 [PASS] 95/95
Test 96: sub_convert(124, 5) -> Expected: 444, Got: 444 [PASS] 96/96
Test 97: div_convert(171, 16) -> Expected: AB, Got: AB [PASS] 97/97
Test 98: sub_convert(171, 16) -> Expected: AB, Got: AB [PASS] 98/98
Test 99: div_convert(-889192704, 16) -> Expected: CAFFFF00, Got: CAFFFF00 [PASS] 99/99
Test 100: sub_convert(-889192704, 16) -> Expected: CAFFFF00, Got: CAFFFF00 [PASS] 100/100
Summary: 100/100 tests passed=thread-exited,id="3",group-id="i1"